@page "/login"

@using CustomerApp.Dataa
@using CustomerApp.Models.ViewModels
@using CustomerApp.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@using System.Collections.Generic
@inject HttpClient Http



@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject CustomerAppContext dx
@inject NavigationManager NavigationManager


<div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
            <EditForm Model="@model" OnValidSubmit="Authenticate" FormName="LoginForm">
                <DataAnnotationsValidator />

                <div class="mb-3 text-center flex-column">
                    <h3>Login</h3>
                   
</div>

                    <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="model.Username" />
            <ValidationMessage For="@(() => model.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="model.Password" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>
                            <div class=" mb-3 text-center">
                                 <span class="text-danger">@errorMessage</span>
                     </div>
                            <div class="mb-3 d-grid gap-2">
                                <button type="submit" class="btn btn-primary">Login</button
                      </div>

                      @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
                </EditForm>
               </div>
                
       
</div>

@code {
   /*  [CascadingParameter]
    public HttpContext? HttpContext{ get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel model { get; set; } = new();
  


    private string? errorMessage;

  

    private async Task Authenticate()
    {
    var useraccount = dx.User.Where(x => x.Username == model.Username && x.Password == model.Password).FirstOrDefault();
    if(useraccount == null ||useraccount.Password != model.Password)
        {
        errorMessage = "Invalid username or password";
    return;
    }
    var claims = new List<Claim>
        {
        new Claim(ClaimTypes.Name, useraccount.Username),
        


    };
    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

    var principal = new ClaimsPrincipal(identity);
    await HttpContext.SignInAsync(principal);
    NavigationManager.NavigateTo("/reservation");
     }
    

    }
   */


  [SupplyParameterFromForm]
    public LoginViewModel model { get; set; } = new();

  private string? errorMessage;


  

    private async Task Authenticate()
    {
         Console.WriteLine($"Attempting to log in with Username: {model.Username} and Password: {model.Password}");
        var response = await Http.PostAsJsonAsync("http://localhost:5219/reservation", model);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/reservation");
        }
        else
        {
            errorMessage = "Invalid username or password";
        }
    }

    



}





